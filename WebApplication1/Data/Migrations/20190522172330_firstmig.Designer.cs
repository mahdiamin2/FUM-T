// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApplication1.Data;

namespace WebApplication1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190522172330_firstmig")]
    partial class firstmig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Address");

                    b.Property<DateTime>("CTime");

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<string>("Explain");

                    b.Property<double>("Price");

                    b.Property<string>("TeacherBio");

                    b.Property<string>("TeacherName");

                    b.HasKey("CourseId");

                    b.ToTable("Tbl_Course");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Address");

                    b.Property<int>("Capacity");

                    b.Property<string>("Cast");

                    b.Property<string>("Director");

                    b.Property<string>("Explain");

                    b.Property<string>("FilmName")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<DateTime>("TTime");

                    b.Property<string>("Writer");

                    b.HasKey("FilmId");

                    b.ToTable("Tbl_Film");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Gallery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<bool>("Default");

                    b.Property<int>("FilmId");

                    b.Property<string>("NamePic")
                        .IsRequired();

                    b.Property<int>("TeaterId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("ViewImageID");

                    b.HasKey("ID");

                    b.HasIndex("CourseId");

                    b.HasIndex("FilmId");

                    b.HasIndex("TeaterId");

                    b.HasIndex("ViewImageID");

                    b.ToTable("Tbl_Gallery");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<int>("CourseId");

                    b.Property<int>("FilmId");

                    b.Property<DateTime>("IDate");

                    b.Property<int>("InvoiceId");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("Status");

                    b.Property<int>("TeaterId");

                    b.Property<string>("TransactionID")
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CourseId");

                    b.HasIndex("FilmId");

                    b.HasIndex("TeaterId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_Invoice");
                });

            modelBuilder.Entity("WebApplication1.Data.db.OtherServer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HttpDomain")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Path")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Tbl_OtherServer");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Shopping", b =>
                {
                    b.Property<int>("ShoppingID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<int>("CourseId");

                    b.Property<int>("FilmId");

                    b.Property<int>("InvoiceId");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime>("SDate");

                    b.Property<bool>("Status");

                    b.Property<int>("TeaterId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ShoppingID");

                    b.HasIndex("CourseId");

                    b.HasIndex("FilmId");

                    b.HasIndex("TeaterId");

                    b.HasIndex("UserId");

                    b.ToTable("Tbl_Shopping");
                });

            modelBuilder.Entity("WebApplication1.Data.db.Teater", b =>
                {
                    b.Property<int>("TeaterId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Address");

                    b.Property<int>("Capacity");

                    b.Property<string>("Cast");

                    b.Property<string>("Director");

                    b.Property<string>("Explain");

                    b.Property<double>("Price");

                    b.Property<DateTime>("TTime");

                    b.Property<string>("TeaterName")
                        .IsRequired();

                    b.Property<string>("Writer");

                    b.HasKey("TeaterId");

                    b.ToTable("Tbl_Teater");
                });

            modelBuilder.Entity("WebApplication1.Data.db.ViewImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt");

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<int?>("ServerID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ServerID");

                    b.ToTable("Tbl_Images");
                });

            modelBuilder.Entity("WebApplication1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NameFamily")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Data.db.Gallery", b =>
                {
                    b.HasOne("WebApplication1.Data.db.Course", "Tbl_Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Film", "Tbl_Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Teater", "Tbl_Teater")
                        .WithMany()
                        .HasForeignKey("TeaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.ViewImage", "Tbl_Images")
                        .WithMany("Tbl_Gallery")
                        .HasForeignKey("ViewImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Data.db.Invoice", b =>
                {
                    b.HasOne("WebApplication1.Data.db.Course", "Tbl_Course")
                        .WithMany("Tbl_Invoice")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Film", "Tbl_Film")
                        .WithMany("Tbl_Invoice")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Teater", "Tbl_Teater")
                        .WithMany("Tbl_Invoice")
                        .HasForeignKey("TeaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Data.db.Shopping", b =>
                {
                    b.HasOne("WebApplication1.Data.db.Course", "Tbl_Course")
                        .WithMany("Tbl_Shopping")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Film", "Tbl_Film")
                        .WithMany("Tbl_Shopping")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Data.db.Teater", "Tbl_Teater")
                        .WithMany("Tbl_Shopping")
                        .HasForeignKey("TeaterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.ApplicationUser", "Tbl_User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Data.db.ViewImage", b =>
                {
                    b.HasOne("WebApplication1.Data.db.OtherServer", "Tbl_OtherServer")
                        .WithMany("Tbl_ViewImage")
                        .HasForeignKey("ServerID");
                });
#pragma warning restore 612, 618
        }
    }
}
